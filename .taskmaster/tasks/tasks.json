{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Setup Project Structure and Database Schema",
        "description": "Initialize the project repository and implement the core data models for the Death Draft game.",
        "details": "Create a new project with appropriate structure for backend and frontend components. Implement the database schema based on the data model in section 11:\n\n1. League model: id, name, joinToken, status (enum: setup|drafting|complete), maxTeams (2-20), picksPerTeam (fixed at 5), createdAt\n2. Team model: id, leagueId, displayName, draftPosition (1..N), joinedAt\n3. Celebrity model: id, leagueId, name (unique per league, case-insensitive), addedByTeamId, addedAt\n4. DraftPick model: id, leagueId, round (1..5), overall (1..N*5), teamId, celebrityId, pickedAt\n\nEnsure proper indexes and constraints, particularly for the uniqueness of celebrity names within a league (case-insensitive, trimmed).",
        "testStrategy": "Write unit tests for each model to verify constraints and relationships. Test the uniqueness constraint for celebrity names with various case and whitespace combinations. Verify that the models can be properly created, retrieved, updated, and deleted.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Project Repository",
            "description": "Create a new project repository with appropriate folder structure for backend and frontend components",
            "dependencies": [],
            "details": "Set up a new repository with the following structure:\n- /backend: For server-side code\n- /frontend: For client-side code\n- /shared: For shared types and utilities\n- /docs: For documentation\nInclude appropriate configuration files (.gitignore, package.json, tsconfig.json, etc.) and README.md with project overview.\n<info added on 2025-08-13T01:51:02.309Z>\n# Implementation Plan: Single-App Stack Architecture\n\n## Stack Choice\n- Next.js (TypeScript) for both API routes and UI in one codebase\n- SQLite + Prisma ORM for rapid local dev; normalized fields for case-insensitive uniqueness\n- Polling-based updates via API route (no WebSockets for MVP)\n\n## Top-level Structure (single app)\n- /app/                 Next.js App Router pages\n  - /onboarding/        Onboarding flow (create, invite, join)\n  - /draft/             Draft page (board, pick, celebrity pool)\n  - /api/               REST-like routes\n    - /leagues/route.ts                      POST create league\n    - /leagues/[joinToken]/join/route.ts     POST join league\n    - /leagues/[leagueId]/celebrities/route.ts  GET list, POST add\n    - /leagues/[leagueId]/start-draft/route.ts  POST start draft\n    - /leagues/[leagueId]/picks/route.ts        POST make pick\n    - /leagues/[leagueId]/draft-state/route.ts  GET polling endpoint\n    - /leagues/[leagueId]/recap/route.ts        GET recap\n- /prisma/\n  - schema.prisma        Models + indexes\n  - migrations/          Auto-generated\n- /src/lib/\n  - prisma.ts            Prisma client singleton\n  - normalization.ts     name normalization (trim + lowercase + collapse spaces)\n  - polling.ts           thin fetcher wrapper (+ ETag/Last-Modified handling later)\n- /src/types/\n  - domain.ts            shared types (DTOs)\n\n## DB Models (Prisma) with Critical Constraints\n- League: id (cuid), name, joinToken (unique), status enum (setup|drafting|complete), maxTeams (2..20), picksPerTeam (const 5), createdAt\n- Team: id, leagueId (fk), displayName, draftPosition (unique within league), joinedAt\n- Celebrity: id, leagueId (fk), name, normalizedName, addedByTeamId (fk), addedAt\n  - @@unique([leagueId, normalizedName])  // enforce case-insensitive uniqueness per league\n- DraftPick: id, leagueId (fk), round (1..5), overall (1..N*5), teamId (fk), celebrityId (fk), pickedAt\n  - @@unique([leagueId, overall])         // each overall pick number once\n\n## Normalization Approach\n- Store both raw name and normalizedName\n- normalizedName = normalize(name): trim; collapse internal whitespace to single space; lowercase\n- Validate on server before insert; return 409 on duplicate\n\n## ETag/Last-Modified for Polling Efficiency\n- draft-state GET returns { state, lastUpdated }\n- For MVP: compute lastUpdated as max of updated timestamps among league, teams, picks\n- Later: add ETag header from a stable hash of payload; support If-None-Match/If-Modified-Since\n\n## Setup Commands\n```\nnpx create-next-app@latest . --ts --eslint --app --use-npm --src-dir=false --import-alias \"@/*\"\nnpm install prisma @prisma/client\nnpx prisma init --url \"file:./dev.db\"\n```\n\n## Initial Files to Create\n- prisma/schema.prisma: models + indexes as above\n- src/lib/prisma.ts: singleton client\n- src/lib/normalization.ts: normalizeName(name: string): string\n- app/api/* routes: stub handlers that return 200 with shape\n- app/onboarding/page.tsx: basic placeholder\n- app/draft/page.tsx: basic placeholder\n\n## Testing Strategy\n- Use the consolidated tasks: Backend integration tests (1.11) and UI smoke tests (12.34) after endpoints/pages stabilize\n\n## Risk Mitigation\n- Keep route handlers small; move logic to /src/services/* as needed to avoid >500 lines\n- Avoid scattering helper files; prefer /src/lib and /src/services with clear names\n- Do not touch .env without user confirmation; Prisma uses DATABASE_URL= \"file:./dev.db\"\n</info added on 2025-08-13T01:51:02.309Z>",
            "status": "done",
            "testStrategy": "Verify that the repository structure is correctly set up and all configuration files are properly initialized."
          },
          {
            "id": 2,
            "title": "Select and Configure Database",
            "description": "Choose an appropriate database system and configure it for the project",
            "dependencies": [],
            "details": "Select a database system (e.g., PostgreSQL, MongoDB) that supports the required data models and constraints. Set up the database connection in the backend with appropriate configuration for development and production environments. Create database migration scripts or schema definitions.",
            "status": "done",
            "testStrategy": "Test database connection and basic CRUD operations. Verify that the database configuration works in different environments."
          },
          {
            "id": 3,
            "title": "Implement League Model",
            "description": "Create the League data model with all required fields and constraints",
            "dependencies": [],
            "details": "Implement the League model with fields: id, name, joinToken, status (enum: setup|drafting|complete), maxTeams (2-20), picksPerTeam (fixed at 5), createdAt. Add appropriate validation for each field. Ensure joinToken is unique and randomly generated. Create database indexes for efficient queries.",
            "status": "done",
            "testStrategy": "Write unit tests to verify League model creation, validation, and constraints. Test edge cases for maxTeams (2 and 20) and status transitions."
          },
          {
            "id": 4,
            "title": "Implement Team Model",
            "description": "Create the Team data model with all required fields and constraints",
            "dependencies": [],
            "details": "Implement the Team model with fields: id, leagueId, displayName, draftPosition (1..N), joinedAt. Add validation for each field. Create a foreign key relationship with the League model. Ensure draftPosition is unique within a league. Add appropriate indexes for efficient queries.",
            "status": "done",
            "testStrategy": "Write unit tests to verify Team model creation, validation, and constraints. Test the relationship with the League model. Verify uniqueness of draftPosition within a league."
          },
          {
            "id": 5,
            "title": "Implement Celebrity Model",
            "description": "Create the Celebrity data model with all required fields and constraints",
            "dependencies": [],
            "details": "Implement the Celebrity model with fields: id, leagueId, name, addedByTeamId, addedAt. Add validation for each field. Create foreign key relationships with League and Team models. Implement case-insensitive, trimmed uniqueness constraint for celebrity names within a league. Add appropriate indexes for efficient queries.",
            "status": "done",
            "testStrategy": "Write unit tests to verify Celebrity model creation, validation, and constraints. Test the case-insensitive uniqueness constraint with various combinations of case and whitespace. Test relationships with League and Team models."
          },
          {
            "id": 6,
            "title": "Implement DraftPick Model",
            "description": "Create the DraftPick data model with all required fields and constraints",
            "dependencies": [],
            "details": "Implement the DraftPick model with fields: id, leagueId, round (1..5), overall (1..N*5), teamId, celebrityId, pickedAt. Add validation for each field. Create foreign key relationships with League, Team, and Celebrity models. Ensure uniqueness of overall pick number within a league. Add appropriate indexes for efficient queries.",
            "status": "done",
            "testStrategy": "Write unit tests to verify DraftPick model creation, validation, and constraints. Test the relationships with other models. Verify uniqueness of overall pick number within a league."
          },
          {
            "id": 7,
            "title": "Create Database Indexes and Constraints",
            "description": "Implement all necessary database indexes and constraints for optimal performance",
            "dependencies": [],
            "details": "Review all models and add appropriate indexes for frequently queried fields. Implement constraints for data integrity, especially for the uniqueness of celebrity names within a league (case-insensitive, trimmed). Create composite indexes for queries that filter on multiple fields. Document all indexes and constraints.",
            "status": "done",
            "testStrategy": "Test query performance with and without indexes. Verify that constraints prevent invalid data. Test the case-insensitive uniqueness constraint for celebrity names with various combinations."
          },
          {
            "id": 8,
            "title": "Implement Model Relationships and Associations",
            "description": "Define and implement relationships between all data models",
            "dependencies": [],
            "details": "Implement one-to-many and many-to-many relationships between models. Define cascade behaviors for deletions and updates. Implement methods for retrieving related records efficiently. Ensure referential integrity across all models.",
            "status": "done",
            "testStrategy": "Test relationship queries in both directions. Verify cascade behaviors. Test retrieval of related records with various query patterns."
          },
          {
            "id": 9,
            "title": "Create Data Access Layer",
            "description": "Implement a data access layer for interacting with the database",
            "dependencies": [],
            "details": "Create repository classes or data access objects for each model. Implement CRUD operations with proper error handling. Add methods for common queries and operations specific to the game logic. Ensure all database operations are properly abstracted.\n<info added on 2025-08-14T02:35:14.563Z>\n## Data Access Layer (DAL) Implementation Plan\n\n### Scope\nCentralize Prisma access into thin repository modules under `web/src/data/` for League, Team, Celebrity, and DraftPick. Keep business rules in route handlers for now (e.g., locking, turn validation), but remove direct Prisma calls from routes where practical.\n\n### Repository Structure\n- `web/src/data/leagueRepo.ts`: getLeagueById, getLeagueByJoinToken, getLeagueByJoinOrId, createLeague, setLeagueStatus\n- `web/src/data/teamRepo.ts`: getTeamById, listTeamsByLeague(order: joinedAt|draftPosition), countTeamsByLeague, createTeam, updateDraftPosition\n- `web/src/data/celebrityRepo.ts`: getCelebrityById, listCelebritiesByLeague, createCelebrity\n- `web/src/data/draftPickRepo.ts`: listPicksByLeague, countPicksByLeague, findPickByCelebrity, createPick\n- `web/src/data/index.ts`: re-exports\n\n### Refactor Targets (Phase 1)\n- `app/api/leagues/route.ts` → use leagueRepo.createLeague\n- `app/api/leagues/[leagueId]/celebrities/route.ts` → use celebrityRepo list/create\n- `app/api/leagues/[leagueId]/join/route.ts` → use leagueRepo + teamRepo\n- `app/api/leagues/[leagueId]/draft-state/route.ts` → use leagueRepo + teamRepo + draftPickRepo\n- `app/api/leagues/[leagueId]/recap/route.ts` → use repos for reads\n- `app/api/leagues/[leagueId]/picks/route.ts` → use repos for reads/writes inside lock; keep lock logic\n- Keep the transaction in start-draft route; use repos for reads where safe; update team positions via tx to preserve atomicity.\n\n### Testing Strategy\n- Ensure type safety and identical responses; run `npm run lint` and `npm run build`\n- Manual smoke testing with Next dev or by calling endpoints with curl/Postman\n\n### Implementation Notes\n- No .env changes; Prisma client remains via `@/lib/prisma`\n- Avoid files >500 lines; each repository should be focused and small\n</info added on 2025-08-14T02:35:14.563Z>",
            "status": "in-progress",
            "testStrategy": "Write unit tests for all repository methods. Test error handling for database operations. Verify that complex queries return the expected results."
          },
          {
            "id": 10,
            "title": "Implement Integration Tests for Database Schema",
            "description": "Create comprehensive integration tests for the database schema and relationships",
            "dependencies": [],
            "details": "Implement integration tests that verify the entire database schema works correctly together. Test complex scenarios involving multiple models. Verify constraints and relationships across the entire schema. Create test fixtures and helpers for database testing.",
            "status": "pending",
            "testStrategy": "Run integration tests against a test database. Test complete workflows involving multiple models. Verify that all constraints and relationships work correctly in integration scenarios."
          },
          {
            "id": 11,
            "title": "Backend integration tests (core flows)",
            "description": "Single consolidated integration test suite covering league create, join, celebrity add/list, draft start, pick, draft-state, recap.",
            "details": "<info added on 2025-08-14T02:54:59.899Z>\n# Backend Integration Test Plan\n\n## Test Setup\n- Dev dependencies: vitest, tsx (optional), @types/node\n- Use Node test environment\n\n## Structure\n- `web/vitest.config.ts` – Configure Node test environment with tsconfig paths support\n- `web/tests/helpers/testDb.ts` – Isolated SQLite test database management\n  - Sets DATABASE_URL=file:./dev.test.db\n  - Handles migration/reset before tests\n  - Creates new Prisma instance per test run\n- `web/tests/integration/coreFlows.test.ts` – Core flow coverage:\n  - Create league → Join (commissioner + one more)\n  - Add/list celebrity\n  - Start draft → Pick → Draft-state → Recap\n\n## Testing Approach\n- Import route handlers and invoke with synthetic NextRequest + params\n- Extract JSON from NextResponse\n- Set dedicated test database via process.env.DATABASE_URL\n- Use Prisma migrate deploy (preferred) or db push for schema setup\n- Consider spawning child process for migrations or use direct Prisma commands\n\n## Cleanup\n- Remove test database file after test suite completion\n\n## CI Integration\n- Add npm script: \"test\" to run vitest\n\n## Exit Criteria\n- All core flows pass against actual handlers and database\n</info added on 2025-08-14T02:54:59.899Z>\n<info added on 2025-08-15T00:45:42.084Z>\n## CI/CD Integration\n\n### GitHub Actions Setup\n- Created `.github/workflows/ci.yml` with comprehensive pipeline:\n  - Triggers: push to main, PRs to main\n  - Node.js 20 with npm cache\n  - Steps: checkout → install deps → generate Prisma client → lint → test → build\n  - All steps run in `web/` directory context\n\n### Pipeline Coverage\n- Full validation workflow: linting, testing, and build verification\n- Tests use isolated SQLite database per run via test helper\n- Ready for team collaboration with automatic PR checks\n\n### Future Considerations\n- Consider adding deployment workflow\n- Potential expansion to test matrix (multiple Node versions)\n</info added on 2025-08-15T00:45:42.084Z>",
            "status": "in-progress",
            "dependencies": [],
            "parentTaskId": 1
          }
        ]
      },
      {
        "id": 2,
        "title": "Implement League Creation API",
        "description": "Create an API endpoint for commissioners to create a new league with configurable settings.",
        "details": "Implement a POST /leagues endpoint that:\n1. Accepts league name and maxTeams (2-20, default 8)\n2. Sets picksPerTeam to fixed value of 5\n3. Generates a secure, unguessable joinToken\n4. Sets initial status to 'setup'\n5. Returns the created league with the joinToken\n\nThe joinToken should be sufficiently random to resist guessing (e.g., UUID v4). Implement validation to ensure league name is provided and maxTeams is within the allowed range.",
        "testStrategy": "Write unit tests to verify validation rules for league creation. Test that joinToken is generated correctly and is sufficiently random. Test edge cases for maxTeams (2, 20, and invalid values). Integration test to verify the complete API flow.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 2,
            "title": "Implement joinToken generation function",
            "description": "Create a utility function to generate secure, unguessable joinTokens for leagues.",
            "dependencies": [],
            "details": "Implement a function that generates a cryptographically secure random token (e.g., UUID v4) to be used as the league joinToken. The function should ensure the token is sufficiently random to resist guessing attacks and should be unique across all leagues.",
            "status": "done",
            "testStrategy": "Test that generated tokens are unique across multiple calls. Verify the randomness and unpredictability of the tokens using appropriate statistical tests."
          },
          {
            "id": 3,
            "title": "Create input validation middleware",
            "description": "Implement middleware to validate league creation request parameters.",
            "dependencies": [],
            "details": "Create validation middleware that checks: 1) league name is provided and is a non-empty string, 2) maxTeams is within the allowed range (2-20) if provided, and 3) no unexpected parameters are included. Return appropriate error messages for validation failures.",
            "status": "in-progress",
            "testStrategy": "Test validation with various inputs including valid data, missing name, out-of-range maxTeams values, and unexpected parameters."
          },
          {
            "id": 4,
            "title": "Implement POST /leagues endpoint handler",
            "description": "Create the API endpoint handler that processes league creation requests and returns the created league.",
            "dependencies": [
              "2.2",
              "2.3"
            ],
            "details": "Implement a handler for POST /leagues that: 1) Validates the request using the validation middleware, 2) Creates a new league with the provided name and maxTeams (default 8), 3) Sets picksPerTeam to 5, 4) Generates and assigns a joinToken using the utility function, 5) Sets initial status to 'setup', and 6) Returns the created league with all fields including the joinToken.",
            "status": "done",
            "testStrategy": "Test successful league creation with minimum required fields. Test with optional fields specified. Verify all default values are correctly applied. Test error handling for validation failures."
          },
          {
            "id": 5,
            "title": "Register route in API router",
            "description": "Add the league creation endpoint to the API router configuration.",
            "dependencies": [
              "2.4"
            ],
            "details": "Register the POST /leagues endpoint in the API router configuration. Ensure proper middleware is applied including validation, authentication if required, and error handling.",
            "status": "done",
            "testStrategy": "Verify the route is correctly registered and accessible. Test that middleware is applied in the correct order."
          }
        ]
      },
      {
        "id": 3,
        "title": "Implement League Join API",
        "description": "Create an API endpoint for participants to join a league via invite link with a display name.",
        "details": "Implement a POST /leagues/{joinToken}/join endpoint that:\n1. Validates the joinToken exists and is for a league in 'setup' status\n2. Checks if the league is at capacity (maxTeams)\n3. Accepts a display name parameter\n4. Creates a new Team record with the display name\n5. Returns success with the team information\n\nImplement appropriate error handling for:\n- Invalid join token\n- League already started (status != 'setup')\n- League at capacity\n- Missing or invalid display name\n\nNo authentication is required as per the PRD.",
        "testStrategy": "Test joining with valid and invalid tokens. Test joining a full league. Test joining a league that has already started. Test validation of display name. Integration test to verify the complete join flow.",
        "priority": "high",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Define API endpoint structure and validation rules",
            "description": "Define the structure of the POST /leagues/{joinToken}/join endpoint and establish validation rules for input parameters.",
            "dependencies": [],
            "details": "Create the endpoint structure that accepts a joinToken path parameter and a display name in the request body. Define validation rules for the display name (required, minimum/maximum length, allowed characters). Document the expected request and response formats.",
            "status": "done",
            "testStrategy": "Write unit tests to verify validation rules for the display name parameter. Test with valid and invalid input formats."
          },
          {
            "id": 2,
            "title": "Implement joinToken validation logic",
            "description": "Create logic to validate that the provided joinToken exists and is associated with a league in 'setup' status.",
            "dependencies": [
              "3.1"
            ],
            "details": "Query the database to find a league with the provided joinToken. Verify that the league exists and is in 'setup' status. Create appropriate error responses for invalid tokens and leagues that have already started.",
            "status": "done",
            "testStrategy": "Test validation with valid tokens, non-existent tokens, and tokens for leagues that are not in 'setup' status."
          },
          {
            "id": 3,
            "title": "Implement league capacity check",
            "description": "Create logic to verify that the league is not at maximum capacity before allowing a new team to join.",
            "dependencies": [
              "3.2"
            ],
            "details": "Count the number of existing teams in the league and compare against the league's maxTeams setting. Return an appropriate error if the league is at capacity.",
            "status": "done",
            "testStrategy": "Test joining leagues with various team counts, including edge cases (empty league, one team away from capacity, at capacity)."
          },
          {
            "id": 4,
            "title": "Implement team creation logic",
            "description": "Create logic to add a new team to the league with the provided display name.",
            "dependencies": [
              "3.3"
            ],
            "details": "Create a new Team record in the database with the provided display name, associated with the league. Generate any necessary team identifiers or metadata. Set appropriate default values for team attributes.",
            "status": "done",
            "testStrategy": "Test team creation with various display names. Verify that all required team attributes are properly set."
          },
          {
            "id": 5,
            "title": "Implement response formatting",
            "description": "Format the API response to return success with the team information.",
            "dependencies": [
              "3.4"
            ],
            "details": "Structure the response to include the newly created team information, including team ID, display name, league information, and any other relevant data. Format the response according to the API standards.",
            "status": "done",
            "testStrategy": "Test that the response contains all required team information and follows the expected format."
          },
          {
            "id": 6,
            "title": "Implement comprehensive error handling",
            "description": "Implement detailed error handling for all possible error scenarios.",
            "dependencies": [
              "3.2",
              "3.3",
              "3.4",
              "3.5"
            ],
            "details": "Create standardized error responses for: invalid join token, league already started (status != 'setup'), league at capacity, missing or invalid display name. Ensure error messages are clear and actionable for the client.",
            "status": "in-progress",
            "testStrategy": "Test each error scenario to verify appropriate error codes and messages are returned. Test edge cases for each validation rule."
          },
          {
            "id": 7,
            "title": "Integrate with WebSocket notifications",
            "description": "Integrate the join endpoint with WebSocket notifications to broadcast team joins in real-time.",
            "dependencies": [
              "3.5"
            ],
            "details": "After successfully creating a team, broadcast a notification to all connected clients for the league that a new team has joined. Include relevant team information in the notification.",
            "status": "pending",
            "testStrategy": "Test that WebSocket notifications are sent when a team joins. Verify the notification contains the correct team information."
          }
        ]
      },
      {
        "id": 4,
        "title": "Implement Celebrity Management API",
        "description": "Create API endpoints to add and retrieve celebrities for a league's draft pool.",
        "details": "Implement the following endpoints:\n1. POST /leagues/{leagueId}/celebrities - Add a new celebrity to the pool\n   - Accept celebrity name\n   - Normalize name (trim whitespace, convert to lowercase for comparison)\n   - Check for duplicates (case-insensitive)\n   - Store the team ID of who added the celebrity\n2. GET /leagues/{leagueId}/celebrities - Retrieve all celebrities in the pool\n   - Include pagination and basic text search by name\n\nEnsure proper validation and error handling for duplicate names, even with different casing or whitespace.\n<info added on 2025-08-12T20:57:39.800Z>\nMVP ADJUSTMENT:\nFor the initial implementation, focus on the core functionality:\n1. POST /leagues/{leagueId}/celebrities - Implement as specified with name normalization and case-insensitive duplicate detection\n2. GET /leagues/{leagueId}/celebrities - Implement a simple endpoint that returns all celebrities for a league without server-side pagination or search functionality\n\nServer-side pagination and text search capabilities are deferred to a future iteration. The frontend will handle basic filtering and display limitations initially. Maintain all validation and error handling for duplicate detection as originally specified.\n</info added on 2025-08-12T20:57:39.800Z>",
        "testStrategy": "Test adding celebrities with various name formats to verify normalization. Test duplicate detection with different case and whitespace. Test the search functionality with partial name matches. Integration test the complete flow of adding and retrieving celebrities.",
        "priority": "high",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Celebrity data model",
            "description": "Define the data structure for storing celebrities in the draft pool",
            "dependencies": [],
            "details": "Create a Celebrity model with fields for id, name, normalizedName (for case-insensitive comparison), leagueId, teamId (who added it), and createdAt timestamp. Ensure the model supports efficient querying by name and pagination.",
            "status": "done",
            "testStrategy": "Verify the model can store all required fields and supports the necessary query patterns."
          },
          {
            "id": 2,
            "title": "Implement name normalization utility",
            "description": "Create a utility function to normalize celebrity names for comparison",
            "dependencies": [],
            "details": "Implement a function that trims whitespace, converts to lowercase, and handles any special characters for consistent comparison. This will be used to detect duplicates regardless of case or spacing differences.",
            "status": "done",
            "testStrategy": "Test with various input formats including mixed case, extra spaces, and special characters to ensure consistent normalization."
          },
          {
            "id": 3,
            "title": "Implement POST endpoint for adding celebrities",
            "description": "Create the API endpoint to add a new celebrity to a league's draft pool",
            "dependencies": [
              "4.1",
              "4.2"
            ],
            "details": "Implement POST /leagues/{leagueId}/celebrities endpoint that accepts a request with celebrity name and team ID. Apply name normalization, check for duplicates using case-insensitive comparison, and store the new celebrity with the team ID of who added it. Return appropriate success or error responses.",
            "status": "done",
            "testStrategy": "Test adding valid celebrities, test duplicate detection with different casing and whitespace, test error handling for invalid inputs."
          },
          {
            "id": 4,
            "title": "Implement duplicate detection logic",
            "description": "Create logic to detect duplicate celebrity names regardless of case or whitespace",
            "dependencies": [
              "4.2"
            ],
            "details": "Using the normalization utility, implement a function to check if a celebrity with the same normalized name already exists in the league's draft pool. This should be case-insensitive and ignore whitespace differences.",
            "status": "done",
            "testStrategy": "Test with variations of the same name (different case, extra spaces) to verify duplicate detection works correctly."
          },
          {
            "id": 5,
            "title": "Implement GET endpoint for retrieving celebrities",
            "description": "Create the API endpoint to retrieve all celebrities in a league's draft pool",
            "dependencies": [
              "4.1"
            ],
            "details": "Implement GET /leagues/{leagueId}/celebrities endpoint with pagination support (limit and offset parameters) and text search by name. The endpoint should return a list of celebrities with their IDs, names, and the team that added them.",
            "status": "done",
            "testStrategy": "Test pagination works correctly, test search functionality with partial name matches, test with empty results and full results."
          },
          {
            "id": 8,
            "title": "Implement input validation and error handling",
            "description": "Add comprehensive validation and error handling to both endpoints",
            "dependencies": [
              "4.3",
              "4.5"
            ],
            "details": "Implement validation for all input parameters including leagueId, celebrity name, and pagination parameters. Return appropriate HTTP status codes and error messages for various error conditions including invalid inputs, duplicate celebrities, and not found errors.",
            "status": "done",
            "testStrategy": "Test all validation rules with valid and invalid inputs. Test all error conditions to ensure appropriate status codes and messages are returned."
          },
          {
            "id": 9,
            "title": "Integrate with WebSocket notifications",
            "description": "Add WebSocket event broadcasting when a new celebrity is added",
            "dependencies": [
              "4.3"
            ],
            "details": "When a new celebrity is successfully added to the draft pool, broadcast an event via WebSocket to all connected clients for that league. Include the celebrity details and the team that added it in the event payload.",
            "status": "pending",
            "testStrategy": "Test that WebSocket events are properly broadcast when celebrities are added. Verify the event payload contains all necessary information."
          }
        ]
      },
      {
        "id": 5,
        "title": "Implement Draft Start API",
        "description": "Create an API endpoint for the commissioner to start the draft, which randomizes the draft order and locks new joins.",
        "details": "Implement a POST /leagues/{leagueId}/start-draft endpoint that:\n1. Verifies the requester is the commissioner (first team to join)\n2. Checks if the league has at least 2 teams\n3. Updates league status from 'setup' to 'drafting'\n4. Randomly assigns draft positions to all teams\n5. Returns the draft order\n\nThe draft order should follow a snake pattern across 5 rounds. Implement validation to prevent starting a draft with fewer than 2 teams.",
        "testStrategy": "Test starting a draft with valid conditions. Test with invalid conditions (not commissioner, fewer than 2 teams). Verify that the draft order is properly randomized and that the league status is updated correctly. Test that new joins are prevented after draft start.",
        "priority": "high",
        "dependencies": [
          1,
          2,
          3
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create endpoint structure and route definition",
            "description": "Set up the basic structure for the POST /leagues/{leagueId}/start-draft endpoint",
            "dependencies": [],
            "details": "Define the route in the API router, create the controller method, and set up the basic request validation middleware. Ensure the endpoint accepts the leagueId parameter and is properly connected to the controller.",
            "status": "done",
            "testStrategy": "Test that the endpoint exists and returns appropriate responses for basic request formats."
          },
          {
            "id": 2,
            "title": "Implement commissioner verification",
            "description": "Add logic to verify that the requester is the commissioner (first team to join the league)",
            "dependencies": [
              "5.1"
            ],
            "details": "Query the database to find the first team that joined the league and compare it with the requester's team ID. Return a 403 Forbidden error if the requester is not the commissioner.\n<info added on 2025-08-13T23:53:46.575Z>\nImplemented commissioner verification for the Draft Start API with the following checks:\n\n- Requires POST body with teamId parameter\n- Validates that the league is in 'setup' status\n- Ensures the league has at least 2 teams\n- Verifies the provided teamId belongs to the league\n- Confirms the teamId matches the commissioner's team (first team to join based on earliest joinedAt timestamp)\n- Returns 403 Forbidden error if any validation fails\n</info added on 2025-08-13T23:53:46.575Z>",
            "status": "done",
            "testStrategy": "Test with both commissioner and non-commissioner requests to verify proper authorization checks."
          },
          {
            "id": 3,
            "title": "Implement team count validation",
            "description": "Add logic to check if the league has at least 2 teams before starting the draft",
            "dependencies": [
              "5.1"
            ],
            "details": "Query the database to count the number of teams in the league. Return a 400 Bad Request error if there are fewer than 2 teams.",
            "status": "done",
            "testStrategy": "Test with leagues having 0, 1, 2, and more teams to verify proper validation."
          },
          {
            "id": 4,
            "title": "Implement league status update",
            "description": "Add logic to update the league status from 'setup' to 'drafting'",
            "dependencies": [
              "5.2",
              "5.3"
            ],
            "details": "Update the league record in the database to change its status from 'setup' to 'drafting'. Include validation to ensure the league is currently in 'setup' status.",
            "status": "done",
            "testStrategy": "Test that the status is correctly updated and that appropriate errors are returned if the league is not in 'setup' status."
          },
          {
            "id": 5,
            "title": "Implement draft order randomization",
            "description": "Add logic to randomly assign draft positions to all teams in the league",
            "dependencies": [
              "5.4"
            ],
            "details": "Retrieve all teams in the league, randomize their order, and assign draft positions. Store the draft positions in the database. Ensure the randomization is truly random and unbiased.",
            "status": "done",
            "testStrategy": "Test that draft positions are assigned to all teams and that the distribution appears random across multiple test runs."
          },
          {
            "id": 6,
            "title": "Implement snake draft pattern calculation",
            "description": "Create logic to calculate the full draft order following a snake pattern across 5 rounds",
            "dependencies": [
              "5.5"
            ],
            "details": "Based on the randomized team positions, calculate the complete draft order for all 5 rounds following a snake pattern (e.g., rounds 1, 3, 5 go in order, rounds 2, 4 go in reverse order). Store this information in the database.",
            "status": "done",
            "testStrategy": "Test that the snake pattern is correctly implemented by verifying the order of picks in each round."
          },
          {
            "id": 7,
            "title": "Implement response formatting",
            "description": "Format and return the draft order in the API response",
            "dependencies": [
              "5.6"
            ],
            "details": "Structure the API response to include the complete draft order information, showing which team picks in which position for each round. Include relevant team information in the response.\n<info added on 2025-08-13T23:53:54.226Z>\nImplemented response formatting for the Start Draft API with a structured JSON response that includes:\n- League identifier (leagueId)\n- Current draft status set to 'drafting'\n- Complete draft order as an array of team objects containing id, displayName, and draftPosition\n- Current pick tracker (currentPickOverall) initialized to 1\n\nThis format provides clients with immediate access to the draft order and initial pick position, enabling the UI to display the current state of the draft without additional API calls.\n</info added on 2025-08-13T23:53:54.226Z>",
            "status": "done",
            "testStrategy": "Test that the response format is correct and contains all necessary information about the draft order."
          },
          {
            "id": 8,
            "title": "Implement transaction handling",
            "description": "Wrap all database operations in a transaction to ensure data consistency",
            "dependencies": [
              "5.4",
              "5.5",
              "5.6"
            ],
            "details": "Use database transactions to ensure that all operations (status update, draft position assignment, etc.) either complete successfully or roll back entirely in case of errors.\n<info added on 2025-08-13T23:54:05.653Z>\nImplemented transaction handling in the startDraft endpoint. All database operations including draft position assignment and league status updates are now wrapped in a single transaction. If any part of the process fails, the entire operation is rolled back to maintain data integrity. This prevents partial updates that could leave the league in an inconsistent state. Transaction isolation level is set to ensure no other processes can modify the relevant records during the operation.\n</info added on 2025-08-13T23:54:05.653Z>",
            "status": "done",
            "testStrategy": "Test error scenarios to verify that the database remains in a consistent state."
          },
          {
            "id": 9,
            "title": "Implement lock for new joins",
            "description": "Add logic to prevent new teams from joining after the draft has started",
            "dependencies": [
              "5.4"
            ],
            "details": "Modify the team join endpoint to check the league status and reject new join requests if the league is in 'drafting' status.\n<info added on 2025-08-13T23:54:14.353Z>\nThe implementation of a lock for new joins after draft start is already handled by the existing system architecture. The team join endpoint already includes a check for league status and rejects new join requests when the league is not in 'setup' status. Since the start-draft API changes the league status from 'setup' to 'drafting', this effectively prevents new teams from joining once the draft has started without requiring additional code changes.\n</info added on 2025-08-13T23:54:14.353Z>",
            "status": "done",
            "testStrategy": "Test that new teams cannot join a league after the draft has started."
          }
        ]
      },
      {
        "id": 6,
        "title": "Implement Draft Pick API",
        "description": "Create an API endpoint for participants to make draft picks during their turn.",
        "details": "Implement a POST /leagues/{leagueId}/picks endpoint that:\n1. Validates it's the requesting team's turn to pick\n2. Accepts a celebrityId parameter\n3. Validates the celebrity exists and hasn't been picked\n4. Creates a DraftPick record with appropriate round and overall pick numbers\n5. Returns the updated draft state\n\nImplement server-side locking to prevent concurrent picks for the same draft position. Calculate the current team's turn based on the snake draft pattern and the number of picks already made.",
        "testStrategy": "Test making valid picks. Test invalid scenarios: wrong turn, already picked celebrity, non-existent celebrity. Test the complete draft flow from first to last pick. Test concurrent pick attempts to verify locking mechanism works correctly.",
        "priority": "high",
        "dependencies": [
          1,
          4,
          5
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design API endpoint structure",
            "description": "Define the structure and parameters for the POST /leagues/{leagueId}/picks endpoint",
            "dependencies": [],
            "details": "Create a detailed specification for the API endpoint including request parameters, headers, authentication requirements, and response format. Define the JSON schema for both request and response objects.",
            "status": "pending",
            "testStrategy": "Review the API design against REST best practices and ensure it aligns with existing API patterns in the application."
          },
          {
            "id": 2,
            "title": "Implement turn validation logic",
            "description": "Create logic to validate that it's the requesting team's turn to make a draft pick",
            "dependencies": [
              "6.1"
            ],
            "details": "Develop a function that determines the current team's turn based on the snake draft pattern and the number of picks already made. This should account for the draft order randomization that happens when the draft starts. Ensure the requesting team matches the team whose turn it currently is.",
            "status": "done",
            "testStrategy": "Test with various draft positions, round numbers, and team counts to verify the snake pattern works correctly. Test edge cases like first pick, last pick of a round, and first pick of a new round."
          },
          {
            "id": 3,
            "title": "Implement celebrity validation",
            "description": "Create logic to validate that the selected celebrity exists and hasn't been picked already",
            "dependencies": [
              "6.1"
            ],
            "details": "Query the database to verify the celebrityId exists in the celebrity pool. Then check that this celebrity hasn't already been selected in a previous pick for this league. Return appropriate error messages if validation fails.",
            "status": "pending",
            "testStrategy": "Test with valid celebrities, non-existent celebrities, and already-picked celebrities. Verify appropriate error messages are returned."
          },
          {
            "id": 4,
            "title": "Implement draft pick creation",
            "description": "Create logic to record a new DraftPick with the correct round and overall pick numbers",
            "dependencies": [
              "6.2",
              "6.3"
            ],
            "details": "Calculate the current round number and overall pick number based on the number of picks already made and the number of teams. Create a new DraftPick record in the database with the appropriate leagueId, teamId, celebrityId, round number, and overall pick number.",
            "status": "pending",
            "testStrategy": "Test that pick numbers are calculated correctly for various scenarios. Verify the database record is created with all required fields."
          },
          {
            "id": 5,
            "title": "Implement server-side locking mechanism",
            "description": "Create a locking mechanism to prevent concurrent picks for the same draft position",
            "dependencies": [],
            "details": "Implement a database-level locking mechanism (e.g., using transactions or a dedicated lock table) to ensure that only one pick can be processed at a time for a given league. The lock should be acquired before validating the turn and released after the pick is recorded.\n<info added on 2025-08-13T23:59:06.973Z>\nImplemented a league-level locking mechanism using an in-process mutex to serialize draft picks per league and prevent concurrent write races. Created a new utility module at web/src/lib/locks.ts that exports a withLeagueLock(leagueId, fn) function. This function provides a critical section that ensures only one pick operation can proceed at a time for a given league.\n\nThe draft pick endpoint now uses this lock to wrap the critical section of the pick creation process, which includes:\n1. Re-checking that it's the team's turn to pick\n2. Verifying the celebrity hasn't been taken\n3. Creating the pick record atomically\n\nThe implementation also updates the league status upon completion of the pick operation. This approach prevents race conditions where two users might attempt to make picks simultaneously, ensuring data integrity throughout the draft process.\n</info added on 2025-08-13T23:59:06.973Z>",
            "status": "done",
            "testStrategy": "Test concurrent pick attempts to verify that only one succeeds and others receive appropriate error messages. Test lock release on both successful picks and failed validation."
          },
          {
            "id": 6,
            "title": "Implement draft state response",
            "description": "Create logic to return the updated draft state after a successful pick",
            "dependencies": [
              "6.4"
            ],
            "details": "After recording a pick, query the database to construct a comprehensive draft state object including: current picks, draft order, current team's turn, remaining picks, and draft status. Format this data according to the API response schema.",
            "status": "pending",
            "testStrategy": "Verify the response includes all required information. Test at different stages of the draft to ensure the state is accurate."
          },
          {
            "id": 7,
            "title": "Integrate with WebSocket notifications",
            "description": "Add code to broadcast the pick event via WebSockets to all connected clients",
            "dependencies": [
              "6.6"
            ],
            "details": "After a successful pick is recorded, trigger a WebSocket event to notify all connected clients about the new pick. Include sufficient data in the event payload for clients to update their state without requiring a full refresh.",
            "status": "pending",
            "testStrategy": "Test that WebSocket events are properly triggered after picks. Verify the payload contains all necessary information."
          },
          {
            "id": 8,
            "title": "Implement draft completion detection",
            "description": "Add logic to detect when the draft is complete and update the league status",
            "dependencies": [
              "6.4"
            ],
            "details": "After recording a pick, check if this was the final pick of the draft (based on picksPerTeam and number of teams). If so, update the league status from 'drafting' to 'complete'.\n<info added on 2025-08-13T23:57:07.872Z>\nThe draft completion detection has been implemented on the server side through the picks route, which now updates the league status to 'complete' when the total number of picks reaches the product of teams and picksPerTeam. On the client side, the UI reflects this completion state by disabling the pick buttons and displaying a completion banner to notify users that the draft has concluded.\n</info added on 2025-08-13T23:57:07.872Z>",
            "status": "done",
            "testStrategy": "Test that the league status is updated correctly after the final pick. Test with different league sizes to verify the completion detection works correctly."
          },
          {
            "id": 9,
            "title": "Create API endpoint controller",
            "description": "Implement the actual API endpoint controller that ties together all the validation and processing logic",
            "dependencies": [
              "6.2",
              "6.3",
              "6.4",
              "6.5",
              "6.6",
              "6.7",
              "6.8"
            ],
            "details": "Create the controller function that handles the POST request to /leagues/{leagueId}/picks. This should authenticate the request, call the validation and processing functions, handle errors appropriately, and return the response.",
            "status": "pending",
            "testStrategy": "Test the complete API flow with various scenarios including successful picks and all error cases. Verify appropriate HTTP status codes are returned."
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Draft State and Recap API",
        "description": "Create API endpoints to retrieve the current draft state and final recap.",
        "details": "Implement the following endpoints:\n1. GET /leagues/{leagueId}/draft-state - Get current draft state\n   - Include current pick, up-next, round/overall indicators\n   - Include all teams with their draft positions and current rosters\n   - Include draft status (setup/drafting/complete)\n2. GET /leagues/{leagueId}/recap - Get post-draft recap\n   - Include final rosters by team\n   - Include overall draft order and all picks\n\nThe draft should be marked complete when all teams have made their 5 picks.",
        "testStrategy": "Test retrieving draft state at different stages (setup, during draft, completed). Verify the current pick and up-next indicators are correct throughout the draft. Test the recap endpoint after draft completion to ensure it shows the correct final state.",
        "priority": "medium",
        "dependencies": [
          1,
          6
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design database schema for draft state and recap",
            "description": "Define the database schema needed to support the draft state and recap API endpoints",
            "dependencies": [],
            "details": "Create or update database models to track draft state including current pick, draft status, and team rosters. Ensure the schema can efficiently support queries for both the draft-state and recap endpoints.",
            "status": "pending",
            "testStrategy": "Create unit tests to verify the database schema correctly models the draft state and supports all required queries."
          },
          {
            "id": 2,
            "title": "Implement draft status tracking logic",
            "description": "Create logic to track and update draft status (setup/drafting/complete)",
            "dependencies": [
              "7.1"
            ],
            "details": "Implement logic to track the draft status and transition between states. The draft should be marked complete when all teams have made their 5 picks. Include validation to ensure proper state transitions.\n<info added on 2025-08-13T23:57:00.552Z>\nAdded UI elements to display draft completion status:\n- Implemented completion banner that appears inline above content with green accent styling when league.status is 'complete'\n- Added logic to disable further draft picks when draft is complete\n- Connected UI elements to the league status state to ensure proper display conditions\n- Ensured banner visibility is consistent across different screen sizes\n</info added on 2025-08-13T23:57:00.552Z>",
            "status": "done",
            "testStrategy": "Test state transitions through the complete draft lifecycle. Verify the draft is correctly marked as complete when all teams have made their 5 picks."
          },
          {
            "id": 3,
            "title": "Implement current pick and up-next calculation",
            "description": "Create logic to calculate the current pick, up-next, and round/overall indicators",
            "dependencies": [
              "7.1",
              "7.2"
            ],
            "details": "Implement algorithms to determine the current pick, the next pick, and calculate round/overall pick numbers based on the snake draft pattern and the number of picks already made.",
            "status": "in-progress",
            "testStrategy": "Test the calculation logic with various league sizes and at different points in the draft to ensure correct pick order is maintained."
          },
          {
            "id": 4,
            "title": "Implement GET /leagues/{leagueId}/draft-state endpoint",
            "description": "Create API endpoint to retrieve the current draft state",
            "dependencies": [
              "7.1",
              "7.2",
              "7.3"
            ],
            "details": "Implement the GET /leagues/{leagueId}/draft-state endpoint that returns the current draft state including current pick, up-next, round/overall indicators, all teams with their draft positions and current rosters, and draft status.",
            "status": "done",
            "testStrategy": "Test retrieving draft state at different stages (setup, during draft, completed). Verify the response includes all required information and is correctly formatted."
          },
          {
            "id": 5,
            "title": "Implement GET /leagues/{leagueId}/recap endpoint",
            "description": "Create API endpoint to retrieve the post-draft recap",
            "dependencies": [
              "7.1",
              "7.2"
            ],
            "details": "Implement the GET /leagues/{leagueId}/recap endpoint that returns the final rosters by team and the overall draft order with all picks. This endpoint should only return complete data when the draft is in 'complete' status.",
            "status": "done",
            "testStrategy": "Test the recap endpoint after draft completion to ensure it shows the correct final state. Test behavior when accessed before draft completion."
          },
          {
            "id": 6,
            "title": "Implement data serialization for API responses",
            "description": "Create serializers/formatters for the draft state and recap API responses",
            "dependencies": [
              "7.4",
              "7.5"
            ],
            "details": "Implement data serialization to format the API responses consistently. Ensure all required fields are included and properly formatted according to the API specification.",
            "status": "pending",
            "testStrategy": "Test serialization with various data scenarios to ensure consistent output format."
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Realtime Updates with WebSockets",
        "description": "Implement WebSocket connections to provide realtime updates for joins, celebrity additions, and draft picks.",
        "details": "Create a WebSocket server that:\n1. Establishes connections per league\n2. Broadcasts events to all connected clients when:\n   - A new team joins the league\n   - A new celebrity is added to the pool\n   - A draft pick is made\n   - Draft status changes\n3. Implements reconnection logic\n4. Ensures updates propagate within 5 seconds\n\nEach event should include the necessary data for clients to update their state without requiring a full refresh. Implement a fallback to short polling (2-5s interval) if WebSockets are not available.\n<info added on 2025-08-12T20:57:35.183Z>\nMVP SCOPE CHANGE: For the initial MVP, we will implement short polling instead of WebSockets for realtime updates. The WebSocket implementation described in this task is deferred to a post-MVP release.\n\nFor the MVP, we will:\n1. Use short polling with a 2-3 second interval to provide near-realtime updates\n2. Implement the polling-friendly endpoints described in subtasks 8.1-8.5\n3. Focus on efficient conditional requests using ETags/Last-Modified headers\n4. Implement basic error handling with backoff for polling failures\n5. Ensure the polling solution meets the same functional requirements (updates for joins, celebrity additions, draft picks, and status changes)\n\nThe original WebSocket implementation will be revisited after the MVP release when we can dedicate resources to a more sophisticated realtime solution.\n</info added on 2025-08-12T20:57:35.183Z>",
        "testStrategy": "Test WebSocket connections and event broadcasting. Measure latency to ensure updates propagate within 5 seconds. Test reconnection scenarios. Test the fallback polling mechanism. Integration test with the full draft flow to verify realtime updates work correctly.",
        "priority": "high",
        "dependencies": [
          3,
          4,
          6,
          7
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement short polling for updates (≤5s)",
            "description": "Replace WebSockets with a simple polling mechanism (2–3s) for joins, celebrity additions, and picks; provide a single service for polling endpoints and notifying UI.",
            "details": "<info added on 2025-08-13T23:44:05.020Z>\nImplemented frontend polling mechanism with HTTP caching support:\n- Created helper functions: createSimplePoller for managing polling intervals and fetchWithIfModifiedSince for conditional requests\n- Configured draft page to poll server every 2.5 seconds for updates\n- Added automatic pause during POST operations and resume after completion\n- Implemented If-Modified-Since/Last-Modified header handling to reduce unnecessary data transfers when content hasn't changed\n- Server now returns 304 Not Modified responses when appropriate, saving bandwidth\n- Client properly handles both fresh data and not-modified responses\n- This implementation serves as foundation for the ETag support in subtask 8.2\n</info added on 2025-08-13T23:44:05.020Z>",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 8
          },
          {
            "id": 2,
            "title": "Add ETag/Last-Modified support on GET endpoints",
            "description": "Support conditional requests to reduce payloads during polling; return 304 when unchanged.",
            "details": "<info added on 2025-08-13T23:43:53.206Z>\nImplemented conditional GET support for draft-state endpoint and wired polling helper in the frontend.\n\n- API: GET /api/leagues/{leagueId}/draft-state now returns Last-Modified and handles If-Modified-Since to return 304 when unchanged.\n  - File: web/src/app/api/leagues/[leagueId]/draft-state/route.ts\n  - Computes lastUpdated from league.createdAt, team.joinedAt, pick.pickedAt; sets Last-Modified; checks If-Modified-Since.\n- Frontend: Introduced polling helper and integrated with draft page.\n  - Added web/src/lib/polling.ts with createSimplePoller and fetchWithIfModifiedSince.\n  - Updated web/src/app/draft/page.tsx to use If-Modified-Since aware fetch, store lastModified, and pause polling during actions (add celebrity, make pick).\n- Verified lints clean. Next: consider ETag support and error backoff (8.5).\n</info added on 2025-08-13T23:43:53.206Z>\n<info added on 2025-08-13T23:49:18.934Z>\nImplemented ETag/If-None-Match for draft-state polling.\n- API: Adds weak ETag computed from lastUpdated, pick/team counts, and upNext; responds 304 on If-None-Match match; still supports Last-Modified.\n  - File: web/src/app/api/leagues/[leagueId]/draft-state/route.ts\n  - ETag format: W/\"timestamp-picks-teams-upNext\" (e.g., W/\"1692817433-12-8-team3\")\n  - Server compares incoming If-None-Match with computed ETag for 304 responses\n- Client: Polling helper now supports sending/receiving ETag; draft page stores/sends ETag alongside If-Modified-Since.\n  - Files: web/src/lib/polling.ts, web/src/app/draft/page.tsx\n  - Updated fetchWithConditionals() to handle both ETag and Last-Modified headers\n  - Draft page now tracks and sends both conditional headers during polling\n- Verified with browser dev tools that 304 responses occur when content unchanged\n- Combined with existing polling pause/resume during user actions for optimal performance\n</info added on 2025-08-13T23:49:18.934Z>",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 8
          },
          {
            "id": 3,
            "title": "Implement polling-friendly draft state endpoint",
            "description": "Expose a single `GET /leagues/{leagueId}/draft-state` that includes current teams, order, current pick, and lastUpdated timestamp for efficient polling.",
            "details": "",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 8
          },
          {
            "id": 4,
            "title": "Integrate polling in frontend state layer",
            "description": "Create a lightweight polling service/hook to update local state on a 2–3s interval; suspend polling during user actions and resume after.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 8
          },
          {
            "id": 5,
            "title": "Basic backoff on polling errors",
            "description": "On repeated 4xx/5xx failures, back off polling interval temporarily; display minimal offline indicator.",
            "details": "<info added on 2025-08-13T23:46:12.254Z>\nImplemented basic polling backoff mechanism for network resilience on the draft page. The system now intelligently handles connection issues by tracking consecutive polling failures and adjusting the polling interval accordingly. Starting at 2.5 seconds, the interval increases to 5 seconds after the second failure and continues doubling up to a maximum of 20 seconds. The interval resets to normal upon successful connection. Added a visual offline indicator that appears when connection issues are detected. This implementation works seamlessly with the existing If-Modified-Since logic and maintains proper polling behavior during user actions (pause/resume). Changes were made in web/src/app/draft/page.tsx.\n</info added on 2025-08-13T23:46:12.254Z>",
            "status": "done",
            "dependencies": [],
            "parentTaskId": 8
          }
        ]
      },
      {
        "id": 9,
        "title": "Create Frontend League Creation and Invite UI",
        "description": "Implement the UI for creating a new league and sharing the invite link.",
        "details": "Create frontend components for:\n1. League creation form with:\n   - League name input\n   - Max teams selector (2-20, default 8)\n   - Create button\n2. League invite screen with:\n   - League details display\n   - Copyable invite link\n   - Teams joined counter\n   - Start draft button (commissioner only)\n\nEnsure the invite link is easily copyable and includes the joinToken. The UI should clearly indicate the commissioner role.",
        "testStrategy": "Test form validation for league creation. Test the copy functionality for the invite link. Test visibility of the start draft button for commissioner vs. regular participants. Test responsive design for different screen sizes.",
        "priority": "medium",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design League Creation Form Component",
            "description": "Create a responsive form component for league creation with name input and team size selector",
            "dependencies": [],
            "details": "Implement a form component with: 1) League name input field with validation, 2) Max teams selector (2-20) with default of 8 using a dropdown or slider, 3) Create button with loading state, 4) Form validation to ensure name is provided and team count is valid",
            "status": "done",
            "testStrategy": "Test form validation for empty name, invalid team counts. Test responsive design on mobile, tablet, and desktop. Verify default values are correctly set."
          },
          {
            "id": 2,
            "title": "Implement League Creation API Integration",
            "description": "Connect the league creation form to the backend API and handle responses",
            "dependencies": [
              "9.1"
            ],
            "details": "Implement API integration that: 1) Sends form data to backend on submission, 2) Handles loading states during API call, 3) Processes API response to extract league details and joinToken, 4) Implements error handling for network issues or validation errors, 5) Redirects to invite screen on successful creation",
            "status": "done",
            "testStrategy": "Test successful API calls and redirection. Test error handling for various API error responses. Test network failure scenarios."
          },
          {
            "id": 3,
            "title": "Design League Invite Screen Component",
            "description": "Create a responsive UI for displaying league details and invite link after creation",
            "dependencies": [
              "9.2"
            ],
            "details": "Implement an invite screen with: 1) League name and details display, 2) Prominently displayed invite link with the joinToken, 3) Copy button with feedback on successful copy, 4) Teams joined counter showing current/maximum, 5) Visual indicator of commissioner status, 6) Start draft button (visible only to commissioner)",
            "status": "done",
            "testStrategy": "Test copy functionality works across browsers. Test responsive design. Verify commissioner-only elements are properly conditionally rendered."
          },
          {
            "id": 4,
            "title": "Implement Real-time Updates for League Invite Screen",
            "description": "Add real-time functionality to update the teams joined counter as new users join",
            "dependencies": [
              "9.3"
            ],
            "details": "Implement real-time updates using: 1) WebSocket connection or polling mechanism to get team join events, 2) Update teams joined counter in real-time without page refresh, 3) Add visual feedback when new teams join, 4) Handle connection issues gracefully",
            "status": "pending",
            "testStrategy": "Test real-time updates with multiple browser sessions. Test reconnection logic if connection is lost. Verify counter updates correctly as teams join."
          },
          {
            "id": 5,
            "title": "Implement Start Draft Functionality",
            "description": "Add functionality for the commissioner to start the draft when ready",
            "dependencies": [
              "9.3",
              "9.4"
            ],
            "details": "Implement start draft functionality: 1) Enable start draft button only when minimum number of teams have joined, 2) Show confirmation dialog before starting, 3) Send API request to start draft, 4) Handle loading state during API call, 5) Redirect all participants to draft board on successful start\n<info added on 2025-08-13T23:55:45.423Z>\nImplementation complete for Start Draft functionality in the onboarding UI. The button now sends a POST request to /leagues/{token}/start-draft with the commissioner's teamId from the session. Added an inline draft order preview to show users the upcoming draft sequence before starting. Upon successful API response, the UI automatically navigates users to the /draft route to begin the drafting process.\n</info added on 2025-08-13T23:55:45.423Z>",
            "status": "done",
            "testStrategy": "Test button enabled/disabled states based on team count. Test confirmation dialog. Test successful start and redirection. Test error handling for start draft failures."
          },
          {
            "id": 6,
            "title": "Implement Local Storage for League and User Data",
            "description": "Store league and user information in local storage to maintain session state",
            "dependencies": [
              "9.2",
              "9.3"
            ],
            "details": "Implement local storage functionality: 1) Store league ID, name, and joinToken after creation, 2) Store user's role (commissioner or participant), 3) Implement utility functions to get/set this data, 4) Add logic to check for existing league data on page load",
            "status": "pending",
            "testStrategy": "Test persistence across page refreshes. Test data retrieval functions. Verify correct role identification from stored data."
          },
          {
            "id": 7,
            "title": "Create Mobile-Responsive Design for All Components",
            "description": "Ensure all UI components work well on mobile, tablet, and desktop devices",
            "dependencies": [
              "9.1",
              "9.3"
            ],
            "details": "Implement responsive design: 1) Use flexbox/grid layouts for adaptability, 2) Optimize form inputs for touch on mobile, 3) Ensure invite link is easily copyable on mobile, 4) Test and adjust layouts for various screen sizes, 5) Implement mobile-specific UI improvements where needed",
            "status": "pending",
            "testStrategy": "Test on various device sizes and orientations. Verify touch interactions work properly on mobile. Test copy functionality on mobile browsers."
          },
          {
            "id": 8,
            "title": "Implement Error Handling and User Feedback",
            "description": "Add comprehensive error handling and user feedback throughout the league creation and invite flow",
            "dependencies": [
              "9.1",
              "9.2",
              "9.3",
              "9.4",
              "9.5"
            ],
            "details": "Implement error handling: 1) Form validation errors with clear messages, 2) API error handling with user-friendly messages, 3) Network error detection and retry options, 4) Loading states with spinners or skeletons, 5) Success notifications for key actions",
            "status": "pending",
            "testStrategy": "Test all error scenarios including form validation, API errors, and network failures. Verify error messages are clear and actionable. Test loading state displays."
          },
          {
            "id": 9,
            "title": "Design Join Screen UI Components",
            "description": "Create the UI components for the join screen including league name display, display name input, and join button.",
            "dependencies": [],
            "details": "Design and implement React components for the join screen. Include a header displaying the league name, an input field for the user's display name with validation, and a prominent join button. Ensure the UI is responsive and follows the application's design system.",
            "status": "pending",
            "testStrategy": "Test the component rendering with various screen sizes. Verify input validation for display name. Test accessibility of all UI elements."
          },
          {
            "id": 10,
            "title": "Implement Error State UI Components",
            "description": "Create UI components for displaying error states including invalid invite link, league full, and league already started scenarios.",
            "dependencies": [
              "10.1"
            ],
            "details": "Design and implement error state components that clearly communicate the issue to the user. Each error state should have a distinct message and potentially a different visual treatment. Include options for users to retry or navigate elsewhere as appropriate.",
            "status": "pending",
            "testStrategy": "Test each error state display. Verify that error messages are clear and actionable. Test that error components render correctly on different devices."
          },
          {
            "id": 11,
            "title": "Create Invite Link Validation Logic",
            "description": "Implement the logic to validate invite links and handle different validation scenarios.",
            "dependencies": [],
            "details": "Create functions to parse and validate invite links. The validation should check if the link format is correct and if it contains a valid league ID. This logic will be used to determine if the join screen or an error state should be displayed.",
            "status": "pending",
            "testStrategy": "Test validation with valid links, malformed links, and links with invalid league IDs. Test edge cases like empty strings or very long inputs."
          },
          {
            "id": 12,
            "title": "Implement API Integration for Join Flow",
            "description": "Connect the join UI to backend APIs for validating leagues and joining teams.",
            "dependencies": [
              "10.1",
              "10.3"
            ],
            "details": "Implement API calls to validate the league status (exists, not full, not started) and to join the league with the user's display name. Handle API responses appropriately, including success cases and various error scenarios.",
            "status": "pending",
            "testStrategy": "Test API integration with mocked responses for success and various error cases. Test retry logic and error handling for network failures."
          },
          {
            "id": 13,
            "title": "Implement Local Storage for Team Information",
            "description": "Create functionality to store and retrieve team information in local storage after successful join.",
            "dependencies": [
              "10.4"
            ],
            "details": "Implement functions to save team information (team ID, display name, league ID) to local storage after a successful join. Create utility functions to retrieve this information for maintaining the user's session without authentication.",
            "status": "pending",
            "testStrategy": "Test storage and retrieval of team information. Test with various browsers. Test edge cases like storage limits and clearing browser data."
          },
          {
            "id": 14,
            "title": "Implement Redirect to Pre-Draft Lobby",
            "description": "Create the logic to redirect users to the pre-draft lobby after successfully joining a league.",
            "dependencies": [
              "10.4",
              "10.5"
            ],
            "details": "Implement the navigation logic to redirect users to the pre-draft lobby page after successfully joining a league. Ensure that the necessary team information is available in the new page context.",
            "status": "pending",
            "testStrategy": "Test the redirect flow after successful join. Verify that team information is correctly passed to or available in the pre-draft lobby."
          },
          {
            "id": 16,
            "title": "Implement Responsive Design for Join UI",
            "description": "Ensure the join flow UI is fully responsive and works well on mobile devices.",
            "dependencies": [
              "10.1",
              "10.2"
            ],
            "details": "Optimize the join flow UI for various screen sizes, particularly focusing on mobile devices. Ensure that input fields, buttons, and error messages are appropriately sized and positioned for touch interaction.",
            "status": "pending",
            "testStrategy": "Test the UI on various device sizes and orientations. Verify touch interactions work correctly on mobile devices. Test with different browsers on mobile platforms."
          }
        ]
      },
      {
        "id": 12,
        "title": "Create Frontend Draft Board UI",
        "description": "Implement the UI for the draft board showing the draft order, current pick, and team rosters.",
        "details": "Create frontend components for:\n1. Draft board with:\n   - Draft order display\n   - Current pick indicator\n   - Up-next indicator\n   - Round and overall pick indicators\n2. Team panels showing:\n   - Team name\n   - Draft position\n   - Current roster (up to 5 picks)\n3. Visual indicators for:\n   - Your team\n   - Current picking team\n   - Completed teams\n\nEnsure the UI updates in realtime as picks are made. Implement a clear visual distinction for the current picking team.",
        "testStrategy": "Test the draft board display with various league sizes. Test the visual indicators for different states. Test realtime updates as picks are made. Test responsive design for different screen sizes.",
        "priority": "high",
        "dependencies": [
          5,
          8,
          "4",
          "6"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Draft Board Layout Component",
            "description": "Implement the main layout component for the draft board that will contain all other subcomponents",
            "dependencies": [],
            "details": "Create a responsive container component that will house the draft order display, team panels, and other draft board elements. Include grid or flex layout structure to organize the various sections of the draft board.",
            "status": "done",
            "testStrategy": "Test responsive behavior across different screen sizes. Verify that the layout maintains proper structure on mobile, tablet, and desktop views."
          },
          {
            "id": 2,
            "title": "Implement Draft Order Display Component",
            "description": "Create a component to display the draft order with team positions",
            "dependencies": [
              "12.1"
            ],
            "details": "Develop a component that shows the sequential draft order with team names and positions. Include visual indicators for the current round and overall pick number. Ensure the component can handle different league sizes (8-14 teams).",
            "status": "done",
            "testStrategy": "Test with various league sizes to ensure proper display. Verify that the draft order correctly updates as rounds progress."
          },
          {
            "id": 3,
            "title": "Build Current Pick Indicator Component",
            "description": "Create a component that highlights the team currently making a selection",
            "dependencies": [
              "12.2"
            ],
            "details": "Implement a visually distinct indicator that clearly shows which team is currently on the clock. Include animations or visual effects to draw attention to the current picking team. Display the time remaining if applicable.",
            "status": "done",
            "testStrategy": "Test that the current pick indicator properly updates when teams change. Verify that the visual distinction is clear and accessible."
          },
          {
            "id": 4,
            "title": "Develop Up-Next Indicator Component",
            "description": "Create a component showing which teams are coming up next in the draft order",
            "dependencies": [
              "12.3"
            ],
            "details": "Build a component that displays the next 2-3 teams in the draft order. Include visual styling that makes it clear these teams are on deck but not currently picking.",
            "status": "done",
            "testStrategy": "Test that the up-next indicator correctly updates as picks are made. Verify the component handles edge cases like the end of rounds correctly."
          },
          {
            "id": 5,
            "title": "Implement Team Panel Components",
            "description": "Create individual team panels showing team information and roster",
            "dependencies": [
              "12.1"
            ],
            "details": "Develop team panel components that display team name, draft position, and current roster (up to 5 picks). Include empty slots for future picks. Design the panels to be compact yet informative.",
            "status": "done",
            "testStrategy": "Test panels with various numbers of picks (0-5). Verify that team information is displayed correctly and that the panels update properly when new picks are made."
          },
          {
            "id": 6,
            "title": "Create Visual Indicators for Team States",
            "description": "Implement visual indicators for user's team, current picking team, and completed teams",
            "dependencies": [
              "12.5"
            ],
            "details": "Add visual styling to distinguish between different team states: the user's own team, the team currently picking, and teams that have completed their draft. Use color coding, borders, or other visual elements to make these distinctions clear.",
            "status": "pending",
            "testStrategy": "Test all possible team states to ensure proper visual indicators. Verify that the indicators are accessible and meet color contrast requirements."
          },
          {
            "id": 7,
            "title": "Implement Round and Overall Pick Indicators",
            "description": "Create components to display the current round and overall pick number",
            "dependencies": [
              "12.2"
            ],
            "details": "Develop indicators that show the current round (e.g., 'Round 3 of 5') and the overall pick number (e.g., 'Pick 27 of 60'). Position these indicators prominently on the draft board.",
            "status": "pending",
            "testStrategy": "Test that the round and pick indicators update correctly as the draft progresses. Verify correct calculations for different league sizes and round structures."
          },
          {
            "id": 8,
            "title": "Implement Realtime Update Functionality",
            "description": "Add functionality to update the draft board UI in realtime as picks are made",
            "dependencies": [
              "12.3",
              "12.5",
              "12.6",
              "12.7"
            ],
            "details": "Integrate with the backend to receive realtime updates when picks are made. Update all relevant components (current pick indicator, team rosters, round/pick indicators) when new data is received. Implement smooth transitions or animations for updates.",
            "status": "pending",
            "testStrategy": "Test realtime updates with simulated pick events. Verify that all components update correctly and simultaneously. Test edge cases like rapid consecutive picks."
          },
          {
            "id": 9,
            "title": "Create Draft Board State Management",
            "description": "Implement state management for the draft board to maintain consistent data across components",
            "dependencies": [
              "12.1",
              "12.2",
              "12.3",
              "12.4",
              "12.5"
            ],
            "details": "Set up state management (using Redux, Context API, or similar) to maintain the draft state across all components. Include state for draft order, current pick, team rosters, and other relevant data. Ensure proper data flow between components.",
            "status": "pending",
            "testStrategy": "Test state updates with various actions. Verify that all components receive the correct state updates. Test that the state remains consistent across the application."
          },
          {
            "id": 10,
            "title": "Implement Responsive Design for Draft Board",
            "description": "Ensure the draft board UI is responsive and works well on different screen sizes",
            "dependencies": [
              "12.1",
              "12.5"
            ],
            "details": "Adapt the draft board layout for different screen sizes. On smaller screens, consider using a more compact layout, collapsible sections, or horizontal scrolling for certain elements. Ensure all critical information remains visible and accessible.",
            "status": "pending",
            "testStrategy": "Test on various device sizes from mobile to desktop. Verify that all information remains accessible and that the UI remains usable on smaller screens."
          },
          {
            "id": 11,
            "title": "Add Loading and Error States",
            "description": "Implement loading indicators and error handling for the draft board UI",
            "dependencies": [
              "12.8",
              "12.9"
            ],
            "details": "Create loading states for when the draft board is initializing or updating. Implement error handling for network issues or other failures. Include user-friendly error messages and retry options where appropriate.",
            "status": "pending",
            "testStrategy": "Test loading states during initialization and updates. Test error handling by simulating network failures and other error conditions. Verify that error messages are clear and helpful."
          },
          {
            "id": 12,
            "title": "Integrate with Other Frontend Components",
            "description": "Integrate the draft board with other related UI components",
            "dependencies": [
              "12.8",
              "12.9",
              "12.11"
            ],
            "details": "Connect the draft board UI with other frontend components like the Draft Pick UI (Task 13) and Celebrity Management UI (Task 11). Ensure proper data flow and interaction between these components.",
            "status": "pending",
            "testStrategy": "Test the integration points between the draft board and other components. Verify that actions in one component correctly affect the state in other components."
          },
          {
            "id": 13,
            "title": "Design Available Celebrities List Component",
            "description": "Create a component to display the list of available celebrities for drafting",
            "dependencies": [],
            "details": "Design and implement a scrollable list component that displays available celebrities. Include name, relevant stats/info, and visual indicators for selection. Ensure the list updates dynamically as celebrities are picked by other teams.",
            "status": "pending",
            "testStrategy": "Test rendering with various numbers of celebrities. Test filtering and sorting. Verify visual updates when celebrities become unavailable."
          },
          {
            "id": 14,
            "title": "Implement Celebrity Search Functionality",
            "description": "Create a search input that filters the available celebrities list in real-time",
            "dependencies": [
              "13.1"
            ],
            "details": "Add a search input that filters the celebrities list as the user types. Implement client-side filtering by name and potentially other attributes. Include clear button and empty state display when no results match.",
            "status": "pending",
            "testStrategy": "Test search with partial matches, case insensitivity, and special characters. Test empty state display. Test performance with large lists."
          },
          {
            "id": 15,
            "title": "Create Pick Button and Selection Confirmation",
            "description": "Implement the button for confirming a draft pick and any confirmation dialogs",
            "dependencies": [
              "13.1"
            ],
            "details": "Create a prominent 'Draft' button that activates when a celebrity is selected. Include a confirmation dialog to prevent accidental picks. Design the button states for enabled, disabled, loading, and success.",
            "status": "pending",
            "testStrategy": "Test button state transitions. Test confirmation dialog. Test accessibility for keyboard navigation and screen readers."
          },
          {
            "id": 16,
            "title": "Implement Current Turn Indicator",
            "description": "Create a visual indicator showing whose turn it is to draft",
            "dependencies": [],
            "details": "Design and implement a prominent indicator showing the current drafting team. Include visual cues when it's the user's turn vs. other teams' turns. Add a timer if applicable to the draft rules.",
            "status": "pending",
            "testStrategy": "Test visibility of the indicator. Test state changes between turns. Test timer functionality if implemented."
          },
          {
            "id": 17,
            "title": "Develop Error State for 'Not Your Turn'",
            "description": "Create UI elements to handle and display errors when a user attempts to draft out of turn",
            "dependencies": [
              "13.3",
              "13.4"
            ],
            "details": "Implement error handling for when users attempt to make picks when it's not their turn. Include clear visual feedback and helpful messaging. Ensure the pick UI is disabled when not the user's turn.",
            "status": "pending",
            "testStrategy": "Test error display when attempting to draft out of turn. Test that the UI is properly disabled. Test error message clarity."
          },
          {
            "id": 18,
            "title": "Develop Error State for 'Celebrity Already Picked'",
            "description": "Create UI elements to handle and display errors when a user attempts to draft a celebrity that's already been selected",
            "dependencies": [
              "13.3"
            ],
            "details": "Implement error handling for when users attempt to pick a celebrity that has already been drafted. Include clear visual feedback and helpful messaging. Ensure already-picked celebrities are visually distinct in the list.",
            "status": "pending",
            "testStrategy": "Test error display when attempting to draft an already-picked celebrity. Test that already-picked celebrities are properly marked or filtered out."
          },
          {
            "id": 19,
            "title": "Develop Error State for Network Errors",
            "description": "Create UI elements to handle and display network-related errors during the draft process",
            "dependencies": [
              "13.3"
            ],
            "details": "Implement error handling for network issues during the draft process. Include retry mechanisms, clear error messages, and recovery options. Ensure the UI remains responsive during network operations.",
            "status": "pending",
            "testStrategy": "Test error display during network failures. Test retry functionality. Test recovery after connection is restored."
          },
          {
            "id": 20,
            "title": "Implement Optimistic UI Updates with Rollback",
            "description": "Create a system for updating the UI immediately upon user action, with the ability to roll back if errors occur",
            "dependencies": [
              "13.3",
              "13.5",
              "13.6",
              "13.7"
            ],
            "details": "Implement optimistic UI updates that show the pick immediately in the user's roster before server confirmation. Create rollback mechanisms for when errors occur. Ensure smooth transitions between states.",
            "status": "pending",
            "testStrategy": "Test optimistic updates when making picks. Test rollback functionality for various error scenarios. Test user experience during the process."
          },
          {
            "id": 21,
            "title": "Implement Real-time Updates for Other Teams' Picks",
            "description": "Create functionality to update the UI in real-time when other teams make their picks",
            "dependencies": [
              "13.1",
              "13.4"
            ],
            "details": "Implement real-time updates using WebSockets or polling to reflect other teams' picks immediately. Update the available celebrities list, draft board, and turn indicator without requiring page refresh.",
            "status": "pending",
            "testStrategy": "Test real-time updates when other teams make picks. Test handling of concurrent picks. Test recovery after connection interruptions."
          },
          {
            "id": 22,
            "title": "Integrate Draft Pick UI with Backend API",
            "description": "Connect the draft pick UI components to the backend API endpoints",
            "dependencies": [
              "13.3",
              "13.8",
              "13.9"
            ],
            "details": "Integrate the draft pick UI with the backend API for submitting picks, retrieving available celebrities, and subscribing to real-time updates. Implement proper error handling and loading states.",
            "status": "pending",
            "testStrategy": "Test API integration with mock and real endpoints. Test error handling for various API response scenarios. Test performance under realistic conditions."
          },
          {
            "id": 23,
            "title": "Create Responsive Layout for Draft Pick UI",
            "description": "Ensure the draft pick UI works well on various screen sizes and devices",
            "dependencies": [
              "13.1",
              "13.2",
              "13.3",
              "13.4"
            ],
            "details": "Implement responsive design for the draft pick UI that works well on desktop, tablet, and mobile devices. Ensure all critical functions are accessible and usable on smaller screens.",
            "status": "pending",
            "testStrategy": "Test on various screen sizes and devices. Test touch interactions on mobile. Test layout adjustments at different breakpoints."
          },
          {
            "id": 24,
            "title": "Implement Accessibility Features",
            "description": "Ensure the draft pick UI is accessible to users with disabilities",
            "dependencies": [
              "13.11"
            ],
            "details": "Implement accessibility features including keyboard navigation, screen reader support, sufficient color contrast, and focus management. Ensure all interactive elements have appropriate ARIA attributes.",
            "status": "pending",
            "testStrategy": "Test with keyboard navigation. Test with screen readers. Test color contrast. Verify ARIA attributes are correctly implemented."
          },
          {
            "id": 25,
            "title": "Design Celebrity Pool UI Layout",
            "description": "Create the layout and component structure for the celebrity pool UI",
            "dependencies": [],
            "details": "Design a responsive layout for the celebrity pool that includes sections for the celebrity list, search input, and add form. Define component hierarchy, state management approach, and styling guidelines.",
            "status": "pending",
            "testStrategy": "Verify layout responsiveness across different screen sizes. Ensure all required UI elements are present and properly positioned."
          },
          {
            "id": 26,
            "title": "Implement Celebrity List Component",
            "description": "Create a component to display the list of available celebrities in the draft pool",
            "dependencies": [
              "11.1"
            ],
            "details": "Develop a component that renders a scrollable list of celebrities with appropriate styling. Each celebrity item should display the name and potentially other relevant information. Include pagination or infinite scrolling if the list becomes large.",
            "status": "pending",
            "testStrategy": "Test rendering with various numbers of celebrities. Test scrolling behavior. Verify correct display of celebrity information."
          },
          {
            "id": 27,
            "title": "Implement Search Functionality",
            "description": "Create a search input component that filters the celebrity list in real-time",
            "dependencies": [
              "11.2"
            ],
            "details": "Implement a text input field that filters the celebrity list as the user types. The search should be case-insensitive and match partial names. Include clear button and appropriate styling for the search input.",
            "status": "pending",
            "testStrategy": "Test search with various inputs including partial matches, case variations, and special characters. Verify the list updates in real-time as the user types."
          },
          {
            "id": 28,
            "title": "Create Add Celebrity Form",
            "description": "Implement a form for adding new celebrities to the draft pool",
            "dependencies": [
              "11.1"
            ],
            "details": "Create a form with input field(s) for celebrity name and potentially other attributes. Include a submit button and appropriate styling. The form should be accessible and follow best practices for form design.",
            "status": "pending",
            "testStrategy": "Test form submission with valid and invalid inputs. Verify form validation feedback. Test accessibility of the form."
          },
          {
            "id": 29,
            "title": "Implement Client-Side Validation",
            "description": "Add validation logic to prevent submission of duplicate or invalid celebrity names",
            "dependencies": [
              "11.4"
            ],
            "details": "Implement client-side validation that checks for duplicate names (case-insensitive, accounting for whitespace) before submission. Add validation for other requirements such as minimum length or character restrictions. Provide clear feedback to users when validation fails.",
            "status": "pending",
            "testStrategy": "Test validation with exact duplicates, case variations, and whitespace differences. Test validation error messages are clear and helpful."
          },
          {
            "id": 30,
            "title": "Implement Error State UI",
            "description": "Create UI components for displaying error states",
            "dependencies": [
              "11.1"
            ],
            "details": "Design and implement error state displays for duplicate celebrity names and network errors. Error messages should be clear, user-friendly, and provide guidance on how to resolve the issue. Include appropriate styling and potentially animations for error states.",
            "status": "pending",
            "testStrategy": "Test error displays with various error messages. Verify error states are visually distinct and provide clear guidance."
          },
          {
            "id": 31,
            "title": "Implement Real-Time Updates",
            "description": "Add functionality to update the celebrity list in real-time when other users add celebrities",
            "dependencies": [
              "11.2"
            ],
            "details": "Integrate with the real-time update system (likely WebSockets) to receive notifications when other users add celebrities. Update the UI accordingly without requiring a page refresh. Include visual indicators for newly added celebrities.",
            "status": "pending",
            "testStrategy": "Test real-time updates with multiple simulated users. Verify the UI updates correctly when new celebrities are added by others."
          },
          {
            "id": 32,
            "title": "Integrate with Backend API",
            "description": "Connect the UI components to the backend API for fetching and adding celebrities",
            "dependencies": [
              "11.2",
              "11.3",
              "11.4",
              "11.5",
              "11.6",
              "11.7"
            ],
            "details": "Implement API calls to fetch the list of celebrities, search celebrities, and add new celebrities. Handle loading states, error handling, and response processing. Ensure proper error handling for network issues and server errors.",
            "status": "pending",
            "testStrategy": "Test API integration with mock responses for success and error cases. Verify loading states are displayed appropriately. Test error handling for various network and server error scenarios."
          },
          {
            "id": 33,
            "title": "Implement Final UI Polish and Optimization",
            "description": "Finalize styling, animations, and performance optimizations",
            "dependencies": [
              "11.8"
            ],
            "details": "Apply final styling touches, add transitions and animations where appropriate. Optimize performance by implementing lazy loading, memoization, or other techniques as needed. Ensure the UI is fully responsive and accessible.",
            "status": "pending",
            "testStrategy": "Test performance with large datasets. Verify animations and transitions work smoothly. Test accessibility compliance. Conduct final cross-browser and cross-device testing."
          },
          {
            "id": 34,
            "title": "UI smoke tests (onboarding + draft)",
            "description": "End-to-end smoke coverage for onboarding flow and draft page happy path; a small set of critical checks only.",
            "details": "",
            "status": "pending",
            "dependencies": [],
            "parentTaskId": 12
          }
        ]
      },
      {
        "id": 14,
        "title": "Create Frontend Recap UI",
        "description": "Implement the UI for the post-draft recap showing final rosters and the complete draft order.",
        "details": "Create frontend components for:\n1. Recap view with:\n   - Final rosters by team\n   - Complete draft order\n   - League summary statistics\n2. Navigation between different recap views\n\nThe recap should be accessible after the draft is complete. Implement a clean, readable layout for the final results.\n<info added on 2025-08-12T20:57:43.223Z>\nMVP SCOPE ADJUSTMENT:\nFor the initial release, focus only on implementing the core recap functionality:\n1. Final rosters by team display\n2. Complete draft order display\n3. Basic navigation between these two views\n\nLeague summary statistics, print/export functionality, social sharing features, and optimizations for large drafts are deferred to future releases. Ensure the basic recap UI is clean, functional, and performs well for standard draft sizes.\n</info added on 2025-08-12T20:57:43.223Z>",
        "testStrategy": "Test the recap display with various league sizes. Test navigation between different recap views. Test that the recap accurately reflects the final draft state.",
        "priority": "low",
        "dependencies": [
          7,
          "12"
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Design Recap UI Layout",
            "description": "Create wireframes and design mockups for the post-draft recap UI",
            "dependencies": [],
            "details": "Design a clean, readable layout for the recap page that includes sections for final rosters by team, complete draft order, and league summary statistics. Consider responsive design for different screen sizes. Include navigation elements between different recap views.",
            "status": "pending",
            "testStrategy": "Review designs with stakeholders. Ensure the layout accommodates various league sizes and roster configurations."
          },
          {
            "id": 2,
            "title": "Implement Final Rosters Component",
            "description": "Create a component to display final rosters by team after draft completion",
            "dependencies": [
              "14.1"
            ],
            "details": "Develop a component that displays each team's final roster, including player names, draft positions, and any relevant statistics. Implement sorting options to view rosters in different orders (e.g., by draft order, alphabetically).",
            "status": "pending",
            "testStrategy": "Test with various team sizes. Verify correct display of all roster information. Test sorting functionality."
          },
          {
            "id": 3,
            "title": "Implement Complete Draft Order Component",
            "description": "Create a component to display the complete draft order with all picks made",
            "dependencies": [
              "14.1"
            ],
            "details": "Develop a component that shows the entire draft order, including round numbers, pick numbers, team names, and selected celebrities. Implement filtering and sorting options for better usability.",
            "status": "pending",
            "testStrategy": "Test with different draft sizes. Verify correct display of all picks. Test filtering and sorting options."
          },
          {
            "id": 5,
            "title": "Implement Navigation Between Recap Views",
            "description": "Create navigation controls to switch between different recap views",
            "dependencies": [
              "14.1",
              "14.2",
              "14.3"
            ],
            "details": "Implement tab-based or button-based navigation to allow users to switch between different recap views (rosters, draft order, statistics). Ensure the navigation is intuitive and maintains state when switching between views.",
            "status": "pending",
            "testStrategy": "Test navigation between all views. Verify state preservation when switching views. Test keyboard accessibility."
          },
          {
            "id": 6,
            "title": "Connect Recap UI to Backend Data",
            "description": "Integrate the recap UI components with backend API endpoints",
            "dependencies": [
              "14.2",
              "14.3"
            ],
            "details": "Connect the recap UI components to the appropriate backend API endpoints to fetch final draft data, rosters, and statistics. Implement proper loading states and error handling for API requests.",
            "status": "pending",
            "testStrategy": "Test API integration with various response scenarios. Test loading states and error handling. Verify data is correctly displayed from API responses."
          },
          {
            "id": 7,
            "title": "Implement Access Control for Recap View",
            "description": "Ensure the recap view is only accessible after draft completion",
            "dependencies": [
              "14.6"
            ],
            "details": "Implement logic to check if the draft is complete before allowing access to the recap view. Redirect users to appropriate screens if they attempt to access the recap before draft completion.",
            "status": "pending",
            "testStrategy": "Test access control with various draft states. Verify redirects work correctly for incomplete drafts."
          },
          {
            "id": 9,
            "title": "Implement Responsive Design for Recap UI",
            "description": "Ensure the recap UI works well on different screen sizes",
            "dependencies": [
              "14.2",
              "14.3",
              "14.5"
            ],
            "details": "Optimize the recap UI components for various screen sizes and devices. Implement responsive layouts that reorganize content appropriately for mobile, tablet, and desktop views.",
            "status": "pending",
            "testStrategy": "Test on various device sizes and orientations. Verify all content is accessible and readable on small screens."
          }
        ]
      },
      {
        "id": 15,
        "title": "Implement Error Handling and Network Resilience",
        "description": "Implement comprehensive error handling and network resilience features throughout the application.",
        "details": "Implement the following features:\n1. Toast notifications for errors and important events\n2. Automatic WebSocket reconnection with exponential backoff\n3. Manual refresh button when disconnected\n4. Offline state indicator\n5. Rate limiting for API endpoints to prevent abuse\n6. Idempotent API operations to handle duplicate requests\n\nFocus on providing clear error messages to users and ensuring the application can recover from network issues gracefully.\n<info added on 2025-08-12T20:57:47.644Z>\n## MVP Adjustment for Error Handling Implementation\n\nFor the initial MVP, focus on implementing these critical error handling components:\n\n1. Toast notifications for errors and important events\n2. API error handling middleware\n3. Client-side error boundaries\n4. Graceful API timeout handling with appropriate user feedback\n\nThe following features will be deferred to a future release:\n- Rate limiting for API endpoints\n- Idempotent API operations\n- Offline state indicator and caching\n- Network connectivity monitoring\n- Automatic WebSocket reconnection with exponential backoff\n- Manual refresh button when disconnected\n- Comprehensive integration tests for network resilience\n\nPrioritize providing clear error messages to users for the most common error scenarios in the MVP implementation.\n</info added on 2025-08-12T20:57:47.644Z>",
        "testStrategy": "Test error handling for various scenarios. Test WebSocket disconnection and reconnection. Test the application behavior when offline. Test rate limiting by simulating rapid requests. Test idempotent operations with duplicate requests.",
        "priority": "medium",
        "dependencies": [
          8,
          14
        ],
        "status": "pending",
        "subtasks": [
          {
            "id": 1,
            "title": "Implement Toast Notification System",
            "description": "Create a reusable toast notification system that can display error messages, warnings, and success notifications to users.",
            "dependencies": [],
            "details": "Develop a toast notification component that can be triggered from anywhere in the application. Include different styles for error, warning, success, and info messages. Ensure notifications are dismissible, have appropriate timeouts, and are accessible. Position them consistently in the UI (typically top-right corner).",
            "status": "pending",
            "testStrategy": "Test different notification types. Verify proper styling, timeout behavior, and dismissal functionality. Test accessibility features including screen reader compatibility."
          },
          {
            "id": 5,
            "title": "Implement API Error Handling Middleware",
            "description": "Create middleware to standardize error handling across all API endpoints.",
            "dependencies": [],
            "details": "Develop server-side middleware that catches errors from API routes and formats them consistently. Include error codes, user-friendly messages, and detailed information for logging. Handle different error types (validation errors, not found, unauthorized, server errors) appropriately. Ensure sensitive error details aren't exposed to clients in production.",
            "status": "pending",
            "testStrategy": "Test error handling for various error types. Verify correct status codes and response formats. Test that sensitive information is not leaked in production mode."
          },
          {
            "id": 6,
            "title": "Implement Client-Side Error Boundary",
            "description": "Add React Error Boundary components to prevent the entire application from crashing when component errors occur.",
            "dependencies": [
              "15.1"
            ],
            "details": "Create Error Boundary components to catch JavaScript errors in the component tree. Implement fallback UIs that show when errors occur. Include options to retry or reset the affected components. Log errors to a monitoring service. Place boundaries strategically to isolate critical sections of the application.",
            "status": "pending",
            "testStrategy": "Test error boundaries with deliberately failing components. Verify fallback UI appears correctly. Test recovery mechanisms like retry functionality."
          },
          {
            "id": 12,
            "title": "Implement Graceful API Timeout Handling",
            "description": "Add timeout handling for API requests with appropriate user feedback.",
            "dependencies": [
              "15.1",
              "15.5"
            ],
            "details": "Implement timeout handling for all API requests. Set appropriate timeout thresholds based on operation type. Show loading indicators for in-progress requests. Provide clear feedback when requests timeout. Implement retry mechanisms with exponential backoff for important operations.",
            "status": "pending",
            "testStrategy": "Test timeout behavior by simulating slow responses. Verify timeout messages are displayed correctly. Test retry functionality works as expected."
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-12T20:36:42.249Z",
      "updated": "2025-08-14T02:54:37.710Z",
      "description": "Tasks for master context"
    }
  }
}